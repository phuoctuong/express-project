{"version":3,"sources":["config/connect.js"],"names":["sequelize","namespace","cls","createNamespace","Sequelize","useCLS","env","process","NODE_ENV","connect","callback","config","configDB","database","username","password","host","dialect","define","logging","seqlizeLog","operatorsAliases","authenticate","sync","force","logger","error"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAIA,kBAAJ;AACA,IAAMC,YAAYC,mCAAIC,eAAJ,CAAoB,eAApB,CAAlB;AACAC,oBAAUC,MAAV,CAAiBJ,SAAjB,E,CAA6B;;AAE7B,IAAMK,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;;AAEA,IAAMC;AAAA,qFAAU,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAERC,YAFQ,GAECC,aAASN,GAAT,CAFD;;AAGd,cAkBON,SAlBP,eAAY,IAAII,mBAAJ,CAAcO,OAAOE,QAArB,EAA+BF,OAAOG,QAAtC,EAAgDH,OAAOI,QAAvD,EAAiE;AAC5EC,aAAML,OAAOK,IAD+D;AAE5EC,gBAASN,OAAOM,OAF4D;AAG5EC,eAAQP,OAAOO,MAH6D;AAI5EC,gBAASC,oBAJmE;AAK5EC,yBAAkB;AAL0D,OAAjE,CAAZ;AAHc;AAAA,aAURrB,UAAUsB,YAAV,EAVQ;;AAAA;AAWd,gCAAatB,SAAb;AAXc;AAAA,aAYRA,UAAUuB,IAAV,CAAe;AACpBC,cAAOlB,QAAQ;AADK,OAAf,CAZQ;;AAAA;AAedI;AAfc;AAAA;;AAAA;AAAA;AAAA;;AAiBde,uBAAOC,KAAP;;AAjBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;QAqBS1B,S,GAAAA,S;kBACMS,O","file":"connect.js","sourcesContent":["import Sequelize from 'sequelize';\nimport cls from 'continuation-local-storage';\nimport configDB from './db';\nimport logger from '../helper/logger';\nimport seqlizeLog from '../helper/seqlizeLog';\nimport { initialModel } from '../models';\n\nlet sequelize;\nconst namespace = cls.createNamespace('own-namespace');\nSequelize.useCLS(namespace); // used for passing transactions automatically\n\nconst env = process.env.NODE_ENV || 'development';\n\nconst connect = async (callback) => {\n\ttry {\n\t\tconst config = configDB[env];\n\t\tsequelize = new Sequelize(config.database, config.username, config.password, {\n\t\t\thost: config.host,\n\t\t\tdialect: config.dialect,\n\t\t\tdefine: config.define,\n\t\t\tlogging: seqlizeLog,\n\t\t\toperatorsAliases: false\n\t\t});\n\t\tawait sequelize.authenticate();\n\t\tinitialModel(sequelize);\n\t\tawait sequelize.sync({\n\t\t\tforce: env === 'test'\n\t\t});\n\t\tcallback();\n\t} catch (error) {\n\t\tlogger.error(`Error Connection ${error}`);\n\t}\n};\n\nexport { sequelize };\nexport default connect;"]}