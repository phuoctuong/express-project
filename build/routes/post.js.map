{"version":3,"sources":["routes/post.js"],"names":["router","express","Router","get","authMiddleware","req","res","logger","info","params","id","postDAO","findById","rs","status","json","code","error","data","toString","message","post","title","body","create","createComment","userAccountId","locals","user"],"mappings":"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","file":"post.js","sourcesContent":["// @flow\n\nimport express from 'express';\nimport logger from '../helper/logger';\nimport { postDAO } from '../daos';\nimport { authMiddleware } from './middleware';\n\nconst router = express.Router();\n\nrouter.get('/:id', authMiddleware, async (req: Request, res: Response) => {\n\tlogger.info(`Post Router: GET /${req.params.id}`);\n\ttry {\n\t\tconst rs = await postDAO.findById(req.params.id, {});\n\n\t\tres.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: false,\n\t\t\tdata: rs\n\t\t});\n\t} catch (error) {\n\t\tlogger.error(`Post Router ${error.toString()}`);\n\t\tres.status(500).json({\n\t\t\tcode: 500,\n\t\t\terror: true,\n\t\t\tmessage: error.toString()\n\t\t});\n\t}\n});\n\nrouter.post('/', authMiddleware, async (req: Request, res: Response) => {\n\tlogger.info('Post Router: POST /');\n\ttry {\n\t\tconst post = {\n\t\t\ttitle: req.body.title\n\t\t};\n\t\tconst rs = await postDAO.create(post);\n\t\tres.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: false,\n\t\t\tdata: rs\n\t\t});\n\t} catch (error) {\n\t\tlogger.error(`Post Router: POST ${error.toString()}`);\n\t\tres.status(500).json({\n\t\t\tcode: 500,\n\t\t\terror: true,\n\t\t\tmessage: error.toString()\n\t\t});\n\t}\n});\n\nrouter.post('/:id/comment', authMiddleware, async (req: Request, res: Response) => {\n\tlogger.info(`Post Router: POST /${req.params.id}/comment`);\n\ttry {\n\t\tconst post = await postDAO.findById(req.params.id, {});\n\t\tconst rs = await post.createComment({\n\t\t\ttitle: req.body.title,\n\t\t\tuserAccountId: res.locals.user.id\n\t\t});\n\n\t\tres.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: false,\n\t\t\tdata: rs\n\t\t});\n\t} catch (error) {\n\t\tlogger.error(`Post Router: POST /:id/comment ${error.toString()}`);\n\t\tres.status(500).json({\n\t\t\tcode: 500,\n\t\t\terror: true,\n\t\t\tmessage: 'Interval Server Error'\n\t\t});\n\t}\n});\n\nexport default router;"]}