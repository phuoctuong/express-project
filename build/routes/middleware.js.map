{"version":3,"sources":["routes/middleware.js"],"names":["authMiddleware","req","res","next","logger","info","auth","header","split","Error","token","id","locals","user","error","toString","status","json","code","message","validateFormMiddleware","body","email","password","firstName","lastName","validation","data"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;;;;;AAEO,IAAMA,0CAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAeC,GAAf,EAA8BC,IAA9B,EAA6C;AAC1EC,kBAAOC,IAAP,CAAY,iBAAZ;AACA,KAAI;AACH,MAAMC,OAAOL,IAAIM,MAAJ,CAAW,eAAX,EAA4BC,KAA5B,CAAkC,GAAlC,CAAb;AACA,MAAIF,KAAK,CAAL,MAAY,KAAhB,EAAuB;AACtB,SAAM,IAAIG,KAAJ,EAAN;AACA;AACD,MAAMC,QAAQJ,KAAK,CAAL,CAAd;;AALG,mBAMY,oBAAUI,KAAV,CANZ;AAAA,MAMKC,EANL,cAMKA,EANL;;AAOHT,MAAIU,MAAJ,CAAWC,IAAX,GAAkB,EAAEF,MAAF,EAAlB;AACAR;AACA,EATD,CASE,OAAOW,KAAP,EAAc;AACfV,mBAAOU,KAAP,sBAAgCA,MAAMC,QAAN,EAAhC;AACAb,MAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBC,SAAM,GADc;AAEpBJ,UAAO,IAFa;AAGpBK,YAAS;AAHW,GAArB;AAKA;AACD,CAnBM;;AAqBA,IAAMC,0DAAyB,SAAzBA,sBAAyB,CAACnB,GAAD,EAAeC,GAAf,EAA8BC,IAA9B,EAA6C;AAClFC,kBAAOC,IAAP,CAAY,4BAAZ;AACA,KAAI;AAAA,kBAMCJ,IAAIoB,IANL;AAAA,kCAEFC,KAFE;AAAA,MAEFA,KAFE,mCAEM,IAFN;AAAA,qCAGFC,QAHE;AAAA,MAGFA,QAHE,sCAGS,IAHT;AAAA,sCAIFC,SAJE;AAAA,MAIFA,SAJE,uCAIU,IAJV;AAAA,qCAKFC,QALE;AAAA,MAKFA,QALE,sCAKS,IALT;;AAOH,MAAMC,aAAa,EAAnB;;AAEA,MAAIJ,UAAU,IAAV,IAAkB,CAAC,6BAAcA,KAAd,CAAvB,EAA6C;AAC5CI,cAAWJ,KAAX,GAAmB,CAAC,yBAAD,CAAnB;AACA;;AAED,MAAIC,aAAa,IAAb,IAAqB,CAAC,gCAAiBA,QAAjB,CAA1B,EAAsD;AACrDG,cAAWH,QAAX,GAAsB,CAAC,0BAAD,EACrB,2EADqB,EAErB,yCAFqB,CAAtB;AAGA;;AAED,MAAIC,cAAc,IAAd,IAAsB,CAAC,mCAAoBA,SAApB,CAA3B,EAA2D;AAC1DE,cAAWF,SAAX,GAAuB,CAAC,wBAAD,CAAvB;AACA;;AAED,MAAIC,aAAa,IAAb,IAAqB,CAAC,mCAAoBA,QAApB,CAA1B,EAAyD;AACxDC,cAAWD,QAAX,GAAsB,CAAC,wBAAD,CAAtB;AACA;;AAED,MAAI,CAAC,qBAAQC,UAAR,CAAL,EAA0B;AACzB,UAAOxB,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BC,UAAM,GADqB;AAE3BJ,WAAO,IAFoB;AAG3Ba,UAAMD;AAHqB,IAArB,CAAP;AAKA;AACDvB;AACA,EAnCD,CAmCE,OAAOW,KAAP,EAAc;AACfV,mBAAOU,KAAP,iCAA2CA,MAAMC,QAAN,EAA3C;AACA,SAAOb,IAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BC,SAAM,GADqB;AAE3BJ,UAAO,IAFoB;AAG3BK,YAAS;AAHkB,GAArB,CAAP;AAKA;AACD,CA7CM","file":"middleware.js","sourcesContent":["// @flow\n\nimport { isEmpty } from 'lodash';\nimport { verifyJWT } from '../helper/jwt';\nimport { validateEmail, validatePassword, validateEmptyString } from '../helper/validate';\nimport logger from '../helper/logger';\n\nexport const authMiddleware = (req: Request, res: Response, next: Next) => {\n\tlogger.info('Auth Middleware');\n\ttry {\n\t\tconst auth = req.header('Authorization').split(' ');\n\t\tif (auth[0] !== 'JWT') {\n\t\t\tthrow new Error();\n\t\t}\n\t\tconst token = auth[1];\n\t\tconst { id } = verifyJWT(token);\n\t\tres.locals.user = { id };\n\t\tnext();\n\t} catch (error) {\n\t\tlogger.error(`Auth Middleware ${error.toString()}`);\n\t\tres.status(401).json({\n\t\t\tcode: 401,\n\t\t\terror: true,\n\t\t\tmessage: 'Authentication Failed'\n\t\t});\n\t}\n};\n\nexport const validateFormMiddleware = (req: Request, res: Response, next: Next) => {\n\tlogger.info('Form Validation Middleware');\n\ttry {\n\t\tconst {\n\t\t\temail = null,\n\t\t\tpassword = null,\n\t\t\tfirstName = null,\n\t\t\tlastName = null\n\t\t} = req.body;\n\t\tconst validation = {};\n\n\t\tif (email !== null && !validateEmail(email)) {\n\t\t\tvalidation.email = ['It is not a valid email'];\n\t\t}\n\n\t\tif (password !== null && !validatePassword(password)) {\n\t\t\tvalidation.password = ['It is at least 8 letters',\n\t\t\t\t'Must contain at least 1 uppercase letter, 1 lowercase letter and 1 number',\n\t\t\t\t'Must contain at least special character'];\n\t\t}\n\n\t\tif (firstName !== null && !validateEmptyString(firstName)) {\n\t\t\tvalidation.firstName = ['It is not empty string'];\n\t\t}\n\n\t\tif (lastName !== null && !validateEmptyString(lastName)) {\n\t\t\tvalidation.lastName = ['It is not empty string'];\n\t\t}\n\n\t\tif (!isEmpty(validation)) {\n\t\t\treturn res.status(200).json({\n\t\t\t\tcode: 200,\n\t\t\t\terror: true,\n\t\t\t\tdata: validation\n\t\t\t});\n\t\t}\n\t\tnext();\n\t} catch (error) {\n\t\tlogger.error(`Form Validation Middleware ${error.toString()}`);\n\t\treturn res.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: true,\n\t\t\tmessage: 'Validate Form Failed'\n\t\t});\n\t}\n};\n\n"]}