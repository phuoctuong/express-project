{"version":3,"sources":["routes/auth.js"],"names":["router","express","Router","post","authMiddleware","req","res","logger","info","id","locals","user","token","refreshToken","status","json","code","error","data","userAccountDAO","update","rs","message","toString","findOneBy","email","body","userAccount","pwd","get","password","validateFormMiddleware","encrypted","value","saltHash","salt","UserProfile","firstName","lastName","findOrCreate","isNewEmail","errors","type","UNIQUE_VIOLATION","path","receiver","pwdReminderToken","passwordReminderToken","transporter","nodemailer","createTransport","service","auth","process","env","GMAIL_USER","pass","GMAIL_PASS","mailOptions","from","to","subject","html","sendMail","err","newPassword"],"mappings":"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","file":"auth.js","sourcesContent":["// @flow\n\nimport express from 'express';\nimport nodemailer from 'nodemailer';\nimport logger from '../helper/logger';\nimport { userAccountDAO } from '../daos';\nimport { authMiddleware, validateFormMiddleware } from './middleware';\nimport { signJWT } from '../helper/jwt';\nimport { encrypt, decrypt } from '../helper/saltHashPassword';\nimport { UNIQUE_VIOLATION } from '../constants';\n\nconst router = express.Router();\n\nrouter.post('/token', authMiddleware, async (req: Request, res: Response) => {\n\tlogger.info('Auth Router: POST /token');\n\tconst { id } = res.locals.user;\n\tconst token = signJWT({\n\t\tid\n\t});\n\tconst refreshToken = signJWT({\n\t\tid\n\t}, '7d');\n\n\tres.status(200).json({\n\t\tcode: 200,\n\t\terror: false,\n\t\tdata: {\n\t\t\ttoken,\n\t\t\trefreshToken\n\t\t}\n\t});\n});\n\nrouter.post('/logout', authMiddleware, async (req: Request, res: Response) => {\n\tlogger.info('Auth Router: POST /logout');\n\ttry {\n\t\tconst { id } = res.locals.user;\n\t\tconst rs = await userAccountDAO.update({ status: false }, {\n\t\t\tid,\n\t\t\tstatus: true\n\t\t});\n\n\t\tif (rs[0] === 0) {\n\t\t\tres.status(401).json({\n\t\t\t\tcode: 401,\n\t\t\t\terror: true,\n\t\t\t\tmessage: 'Can\\'t Logout Of This Account'\n\t\t\t});\n\t\t} else {\n\t\t\tres.status(200).json({\n\t\t\t\tcode: 200,\n\t\t\t\terror: false,\n\t\t\t\tmessage: 'Logout Successfully'\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tlogger.error(`Auth Router: POST /logout ${error.toString()}`);\n\t\tres.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: true,\n\t\t\tmessage: 'Logout Failed'\n\t\t});\n\t}\n});\n\nrouter.post('/login', async (req: Request, res: Response) => {\n\tlogger.info('Auth Router: POST /login');\n\ttry {\n\t\tconst userAccount = await userAccountDAO.findOneBy({\n\t\t\temail: req.body.email\n\t\t});\n\n\t\tconst pwd = decrypt(userAccount.get('password'), userAccount.get('saltHash'));\n\t\tif (pwd !== req.body.password) {\n\t\t\treturn res.status(200).json({\n\t\t\t\tcode: 200,\n\t\t\t\terror: true,\n\t\t\t\tdata: {\n\t\t\t\t\tpassword: 'Password Is Incorrect'\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst token = signJWT({\n\t\t\tid: userAccount.get('id')\n\t\t});\n\t\tconst refreshToken = signJWT({\n\t\t\tid: userAccount.get('id')\n\t\t}, '7d');\n\n\t\tawait userAccount.update({\n\t\t\ttoken,\n\t\t\tstatus: true\n\t\t});\n\n\t\treturn res.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: false,\n\t\t\tmessage: 'Login Successfully',\n\t\t\tdata: {\n\t\t\t\ttoken,\n\t\t\t\trefreshToken\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\tlogger.error(`Auth Router: POST /login ${error.toString()}`);\n\t\treturn res.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: true,\n\t\t\tdata: {\n\t\t\t\temail: 'Email Is Incorrect'\n\t\t\t}\n\t\t});\n\t}\n});\n\nrouter.post('/signup', validateFormMiddleware, async (req: Request, res: Response) => {\n\tlogger.info('Auth Router: POST /signup');\n\ttry {\n\t\t// Encrypt password\n\t\tconst encrypted = encrypt(req.body.password);\n\t\tconst userAccount = {\n\t\t\temail: req.body.email,\n\t\t\tpassword: encrypted.value,\n\t\t\tsaltHash: encrypted.salt,\n\t\t\tUserProfile: {\n\t\t\t\tfirstName: req.body.firstName,\n\t\t\t\tlastName: req.body.lastName\n\t\t\t}\n\t\t};\n\t\tconst rs = await userAccountDAO.findOrCreate(userAccount);\n\t\tconst isNewEmail = rs[1];\n\t\tif (!isNewEmail) {\n\t\t\treturn res.status(200).json({\n\t\t\t\tcode: 200,\n\t\t\t\terror: true,\n\t\t\t\tdata: {\n\t\t\t\t\temail: 'Email Is Existed'\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn res.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: false,\n\t\t\tmessage: 'Sign Up Successfully'\n\t\t});\n\t} catch (error) {\n\t\tlogger.error(`Auth Router: POST /signup ${error.toString()}`);\n\t\tconst { errors } = error;\n\t\tlet message = 'Something broken';\n\n\t\tif (errors[0] && errors[0].type === UNIQUE_VIOLATION) {\n\t\t\tmessage = `${errors[0].path} existed`;\n\t\t}\n\n\t\treturn res.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: true,\n\t\t\tdata: {\n\t\t\t\temail: message\n\t\t\t}\n\t\t});\n\t}\n});\n\nrouter.post('/lost-password', async (req: Request, res: Response) => {\n\tlogger.info('Auth Router: POST /lost-password');\n\ttry {\n\t\tconst receiver = req.body.email;\n\t\tconst userAccount = await userAccountDAO.findOneBy({\n\t\t\temail: receiver\n\t\t});\n\n\t\tif (userAccount) {\n\t\t\tconst pwdReminderToken = signJWT({\n\t\t\t\tid: userAccount.get('id')\n\t\t\t});\n\t\t\tawait userAccount.update({\n\t\t\t\tpasswordReminderToken: pwdReminderToken\n\t\t\t});\n\t\t\tconst transporter = nodemailer.createTransport({\n\t\t\t\tservice: 'gmail',\n\t\t\t\tauth: {\n\t\t\t\t\tuser: process.env.GMAIL_USER,\n\t\t\t\t\tpass: process.env.GMAIL_PASS\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst mailOptions = {\n\t\t\t\tfrom: process.env.GMAIL_USER,\n\t\t\t\tto: receiver,\n\t\t\t\tsubject: 'Lost Password',\n\t\t\t\thtml: `<p>Token With Reset Password ${pwdReminderToken}</p>`\n\t\t\t};\n\n\t\t\ttransporter.sendMail(mailOptions, (err, info) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn res.status(200).json({\n\t\t\t\t\t\tcode: 200,\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\temail: 'Server Can\\'t Send Email'\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn res.status(200).json({\n\t\t\t\t\tcode: 200,\n\t\t\t\t\terror: false,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttoken: pwdReminderToken\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\treturn res.status(200).json({\n\t\t\t\tcode: 200,\n\t\t\t\terror: true,\n\t\t\t\tdata: {\n\t\t\t\t\temail: 'Email Is Not Registered'\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tlogger.error(`Auth Router: POST /lost-password ${error.toString()}`);\n\t\treturn res.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: true,\n\t\t\tdata: {\n\t\t\t\temail: 'Can\\'t Send Email'\n\t\t\t}\n\t\t});\n\t}\n});\n\nrouter.post('/reset-password', validateFormMiddleware, authMiddleware, async (req: Request, res: Response) => {\n\tlogger.info('Auth Router: POST /reset-password');\n\ttry {\n\t\tconst { id } = res.locals.user;\n\t\tconst newPassword = req.body.password;\n\t\tconst userAccount = await userAccountDAO.findOneBy({\n\t\t\tid\n\t\t});\n\n\t\tif (userAccount) {\n\t\t\tconst encrypted = encrypt(newPassword);\n\t\t\tawait userAccount.update({\n\t\t\t\tpassword: encrypted.value,\n\t\t\t\tsaltHash: encrypted.salt\n\t\t\t});\n\n\t\t\treturn res.status(200).json({\n\t\t\t\tcode: 200,\n\t\t\t\terror: false,\n\t\t\t\tmessage: 'Reset Password Successfully'\n\t\t\t});\n\t\t}\n\n\t\treturn res.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: true,\n\t\t\tmessage: 'Account Is Not Existed'\n\t\t});\n\t} catch (error) {\n\t\tlogger.error(`Auth Router: POST /reset-password ${error.toString()}`);\n\t\treturn res.status(200).json({\n\t\t\tcode: 200,\n\t\t\terror: true,\n\t\t\tmessage: 'Reset Password Failed'\n\t\t});\n\t}\n});\n\nexport default router;"]}