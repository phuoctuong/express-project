{"version":3,"sources":["helper/seqlizeLog.js"],"names":["seqlizeLog","message","writeStream","fs","createWriteStream","path","resolve","process","cwd","flags","write","end","on","logger","error","stack"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,SAAbA,UAAa,CAACC,OAAD,EAAqB;AACvC,KAAMC,cAAcC,aAAGC,iBAAH,CAAqBC,eAAKC,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,aAA5B,CAArB,EAAiE;AACpFC,SAAO;AAD6E,EAAjE,CAApB;AAGAP,aAAYQ,KAAZ,CAAkBT,OAAlB,EAA2B,MAA3B;AACAC,aAAYS,GAAZ,CAAgB,IAAhB;AACAT,aAAYU,EAAZ,CAAe,OAAf,EAAwB;AAAA,SAASC,iBAAOC,KAAP,CAAaA,MAAMC,KAAnB,CAAT;AAAA,EAAxB;AACA,CAPD;;kBASef,U","file":"seqlizeLog.js","sourcesContent":["// @flow\n\nimport fs from 'fs';\nimport path from 'path';\nimport logger from './logger';\n\nconst seqlizeLog = (message: string) => {\n\tconst writeStream = fs.createWriteStream(path.resolve(process.cwd(), 'scripts.txt'), {\n\t\tflags: 'a'\n\t});\n\twriteStream.write(message, 'UTF8');\n\twriteStream.end('\\n');\n\twriteStream.on('error', error => logger.error(error.stack));\n};\n\nexport default seqlizeLog;"]}