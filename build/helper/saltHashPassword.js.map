{"version":3,"sources":["helper/saltHashPassword.js"],"names":["algorithm","maxLength","getRandomBytes","length","crypto","randomBytes","Math","ceil","toString","slice","encrypt","data","key","cipher","createCipher","crypted","update","final","salt","value","decrypt","decipher","createDecipher","decrypted"],"mappings":";;;;;;;AAEA;;;;;;AAEA,IAAMA,YAAY,aAAlB;;AACA,IAAMC,YAAY,EAAlB;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,MAAD,EAAoB;AAC1C,QAAOC,iBAAOC,WAAP,CAAmBC,KAAKC,IAAL,CAAUJ,SAAS,CAAnB,CAAnB,EACLK,QADK,CACI,KADJ,EAELC,KAFK,CAEC,CAFD,EAEIN,MAFJ,CAAP;AAGA,CAJD;;AAMA,IAAMO,UAAU,SAAVA,OAAU,CAACC,IAAD,EAAkB;AACjC,KAAMC,MAAMV,eAAeD,SAAf,CAAZ;AACA,KAAMY,SAAST,iBAAOU,YAAP,CAAoBd,SAApB,EAA+BY,GAA/B,CAAf;AACA,KAAIG,UAAUF,OAAOG,MAAP,CAAcL,IAAd,EAAoB,MAApB,EAA4B,KAA5B,CAAd;AACAI,YAAWF,OAAOI,KAAP,CAAa,KAAb,CAAX;AACA,QAAO;AACNC,QAAMN,GADA;AAENO,SAAOJ;AAFD,EAAP;AAIA,CATD;;AAWA,IAAMK,UAAU,SAAVA,OAAU,CAACT,IAAD,EAAeC,GAAf,EAA+B;AAC9C,KAAMS,WAAWjB,iBAAOkB,cAAP,CAAsBtB,SAAtB,EAAiCY,GAAjC,CAAjB;AACA,KAAIW,YAAYF,SAASL,MAAT,CAAgBL,IAAhB,EAAsB,KAAtB,EAA6B,MAA7B,CAAhB;AACAY,cAAaF,SAASJ,KAAT,CAAe,MAAf,CAAb;AACA,QAAOM,SAAP;AACA,CALD;;QAOSb,O,GAAAA,O;QAASU,O,GAAAA,O","file":"saltHashPassword.js","sourcesContent":["// @flow\n\nimport crypto from 'crypto';\n\nconst algorithm = 'aes-256-cbc';\nconst maxLength = 15;\n\nconst getRandomBytes = (length: number) => {\n\treturn crypto.randomBytes(Math.ceil(length / 2))\n\t\t.toString('hex')\n\t\t.slice(0, length);\n};\n\nconst encrypt = (data: string) => {\n\tconst key = getRandomBytes(maxLength);\n\tconst cipher = crypto.createCipher(algorithm, key);\n\tlet crypted = cipher.update(data, 'utf8', 'hex');\n\tcrypted += cipher.final('hex');\n\treturn {\n\t\tsalt: key,\n\t\tvalue: crypted\n\t};\n};\n\nconst decrypt = (data: string, key: string) => {\n\tconst decipher = crypto.createDecipher(algorithm, key);\n\tlet decrypted = decipher.update(data, 'hex', 'utf8');\n\tdecrypted += decipher.final('utf8');\n\treturn decrypted;\n};\n\nexport { encrypt, decrypt };\n"]}