{"version":3,"sources":["helper/jwt.js"],"names":["signJWT","obj","expiresTime","auth","basicAuth","expiresIn","jwt","sign","data","secretOrKey","algorithm","verifyJWT","token","decode","verify"],"mappings":";;;;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,SAAVA,OAAU,CAACC,GAAD,EAA8D;AAAA,KAAnDC,WAAmD,uEAA7BC,eAAKC,SAAL,CAAeC,SAAc;;AAC7E,QAAOC,uBAAIC,IAAJ,CAAS;AACfC,QAAMP;AADS,EAAT,EAEJE,eAAKC,SAAL,CAAeK,WAFX,EAEwB;AAC9BJ,aAAWH,WADmB;AAE9BQ,aAAWP,eAAKC,SAAL,CAAeM;AAFI,EAFxB,CAAP;AAMA,CAPD;;AASA,IAAMC,YAAY,SAAZA,SAAY,CAACC,KAAD,EAAmB;AACpC,KAAMC,SAASP,uBAAIQ,MAAJ,CAAWF,KAAX,EAAkBT,eAAKC,SAAL,CAAeK,WAAjC,EAA8C;AAC5DC,aAAWP,eAAKC,SAAL,CAAeM;AADkC,EAA9C,CAAf;AAGA,QAAOG,OAAOL,IAAd;AACA,CALD;;QAOSR,O,GAAAA,O;QAASW,S,GAAAA,S","file":"jwt.js","sourcesContent":["// @flow\n\nimport jwt from 'jsonwebtoken';\nimport auth from '../config/auth';\n\nconst signJWT = (obj: any, expiresTime: string = auth.basicAuth.expiresIn) => {\n\treturn jwt.sign({\n\t\tdata: obj\n\t}, auth.basicAuth.secretOrKey, {\n\t\texpiresIn: expiresTime,\n\t\talgorithm: auth.basicAuth.algorithm\n\t});\n};\n\nconst verifyJWT = (token: string) => {\n\tconst decode = jwt.verify(token, auth.basicAuth.secretOrKey, {\n\t\talgorithm: auth.basicAuth.algorithm\n\t});\n\treturn decode.data;\n};\n\nexport { signJWT, verifyJWT };"]}