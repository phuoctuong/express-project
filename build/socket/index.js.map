{"version":3,"sources":["socket/index.js"],"names":["io","Server","path","use","socket","next","query","handshake","token","id","payload","userId","error","logger","toString","Error","onConnect","on","info","room","join","leave","data","broadcast","to","emit"],"mappings":";;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,KAAK,IAAIC,gBAAJ,CAAW;AACrBC,OAAM;AADe,CAAX,CAAX;;AAIAF,GAAGG,GAAH,CAAO,UAACC,MAAD,EAASC,IAAT,EAAkB;AACxB,KAAI;AAAA,MACKC,KADL,GACeF,OAAOG,SADtB,CACKD,KADL;;AAAA,mBAEY,oBAAUA,MAAME,KAAhB,CAFZ;AAAA,MAEKC,EAFL,cAEKA,EAFL;;AAGHL,SAAOM,OAAP,GAAiB,EAAEC,QAAQF,EAAV,EAAjB;AACAJ;AACA,EALD,CAKE,OAAOO,KAAP,EAAc;AACfC,mBAAOD,KAAP,oBAA8BA,MAAME,QAAN,EAA9B;AACAT,OAAK,IAAIU,KAAJ,CAAU,sBAAV,CAAL;AACA;AACD,CAVD;;AAYA,IAAMC,YAAY,SAAZA,SAAY,CAACZ,MAAD,EAAY;AAC7BA,QAAOa,EAAP,CAAU,SAAV,EAAqB,YAAM;AAC1BJ,mBAAOK,IAAP,oBAA6Bd,OAAOK,EAApC;AACA,EAFD;;AAIAL,QAAOa,EAAP,CAAU,MAAV,EAAkB,UAACE,IAAD,EAAkB;AACnC,MAAIA,IAAJ,EAAU;AACTf,UAAOgB,IAAP,CAAYD,IAAZ,EAAkB,YAAM;AACvBf,WAAOM,OAAP,8BACIN,OAAOM,OADX;AAECS;AAFD;AAIAN,qBAAOK,IAAP,aAAsBd,OAAOK,EAA7B,oBAA8CL,OAAOM,OAAP,CAAeC,MAA7D;AACA,IAND;AAOA;AACDE,mBAAOK,IAAP,sBAA+Bd,OAAOM,OAAP,CAAeC,MAA9C;AACA,EAXD;;AAaAP,QAAOa,EAAP,CAAU,OAAV,EAAmB,YAAM;AACxBb,SAAOiB,KAAP;AACAR,mBAAOK,IAAP,sBAA+Bd,OAAOM,OAAP,CAAeC,MAA9C;AACA,EAHD;;AAKAP,QAAOa,EAAP,CAAU,WAAV,EAAuB,UAACK,IAAD,EAA6B;AACnDlB,SAAOmB,SAAP,CAAiBC,EAAjB,CAAoBpB,OAAOM,OAAP,CAAeS,IAAnC,EAAyCM,IAAzC,CAA8C,WAA9C,EAA2DH,IAA3D;AACA,EAFD;;AAIAlB,QAAOa,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC7BJ,mBAAOK,IAAP,sBAA+Bd,OAAOM,OAAP,CAAeC,MAA9C;AACA,EAFD;;AAIAP,QAAOa,EAAP,CAAU,OAAV,EAAmB,UAACL,KAAD,EAAW;AAC7BC,mBAAOD,KAAP,wBAAkCR,OAAOM,OAAP,CAAeC,MAAjD,UAA4DC,MAAME,QAAN,EAA5D;AACA,EAFD;AAGA,CAlCD;;AAoCAd,GAAGiB,EAAH,CAAM,YAAN,EAAoBD,SAApB;;kBAEehB,E","file":"index.js","sourcesContent":["// @flow\n\nimport Server from 'socket.io';\nimport logger from '../helper/logger';\nimport { verifyJWT } from '../helper/jwt';\n\nconst io = new Server({\n\tpath: '/chat'\n});\n\nio.use((socket, next) => {\n\ttry {\n\t\tconst { query } = socket.handshake;\n\t\tconst { id } = verifyJWT(query.token);\n\t\tsocket.payload = { userId: id };\n\t\tnext();\n\t} catch (error) {\n\t\tlogger.error(`Socket Error: ${error.toString()}`);\n\t\tnext(new Error('Authenticated Failed'));\n\t}\n});\n\nconst onConnect = (socket) => {\n\tsocket.on('connect', () => {\n\t\tlogger.info(`Socket Client ${socket.id} connected`);\n\t});\n\n\tsocket.on('join', (room: string) => {\n\t\tif (room) {\n\t\t\tsocket.join(room, () => {\n\t\t\t\tsocket.payload = {\n\t\t\t\t\t...socket.payload,\n\t\t\t\t\troom\n\t\t\t\t};\n\t\t\t\tlogger.info(`Socket ${socket.id} - ClientId ${socket.payload.userId} joined room successfully`);\n\t\t\t});\n\t\t}\n\t\tlogger.info(`Socket ClientId ${socket.payload.userId} connected`);\n\t});\n\n\tsocket.on('leave', () => {\n\t\tsocket.leave();\n\t\tlogger.info(`Socket ClientId ${socket.payload.userId} left room`);\n\t});\n\n\tsocket.on('broadcast', (data: SocketPayloadType) => {\n\t\tsocket.broadcast.to(socket.payload.room).emit('broadcast', data);\n\t});\n\n\tsocket.on('disconnect', () => {\n\t\tlogger.info(`Socket ClientId ${socket.payload.userId} disconnected`);\n\t});\n\n\tsocket.on('error', (error) => {\n\t\tlogger.error(`Socket Error from ${socket.payload.userId}: ${error.toString()}`);\n\t});\n};\n\nio.on('connection', onConnect);\n\nexport default io;"]}