{"version":3,"sources":["daos/userAccount.js"],"names":["userAccountDAO","findById","id","options","Promise","resolve","reject","models","userAccount","scope","attributes","then","result","catch","error","findBy","attrs","findAll","where","findOneBy","findOne","create","sequelize","transaction","trans","include","model","userProfile","as","delete","destroy","update","value","returning","findOrCreate","email","defaults","findOrCreateSocial","provider","loginProvider"],"mappings":"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","file":"userAccount.js","sourcesContent":["// @flow\n\nimport Promise from 'bluebird';\nimport { sequelize } from '../config/connect';\nimport { models } from '../models';\n\nconst userAccountDAO = {};\n\nuserAccountDAO.findById = (id: number, options: Object) => {\n\treturn new Promise((resolve, reject) => {\n\t\tmodels.userAccount.scope('detail').findById(id, {\n\t\t\tattributes: ['email', 'activated', 'status'],\n\t\t\t...options\n\t\t})\n\t\t\t.then(result => resolve(result))\n\t\t\t.catch(error => reject(error));\n\t});\n};\n\nuserAccountDAO.findBy = (attrs: Object) => {\n\treturn new Promise((resolve, reject) => {\n\t\tmodels.userAccount.scope('detail').findAll({ where: attrs })\n\t\t\t.then(result => resolve(result))\n\t\t\t.catch(error => reject(error));\n\t});\n};\n\nuserAccountDAO.findOneBy = (attrs: Object) => {\n\treturn new Promise((resolve, reject) => {\n\t\tmodels.userAccount.scope('detail').findOne({ where: attrs })\n\t\t\t.then(result => resolve(result))\n\t\t\t.catch(error => reject(error));\n\t});\n};\n\nuserAccountDAO.create = (userAccount: UserAccount) => {\n\treturn sequelize.transaction((trans) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tmodels.userAccount.create(userAccount, {\n\t\t\t\tinclude: [{\n\t\t\t\t\tmodel: models.userProfile,\n\t\t\t\t\tas: 'UserProfile'\n\t\t\t\t}]\n\t\t\t})\n\t\t\t\t.then((result) => {\n\t\t\t\t\tresolve(result);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t});\n\t});\n};\n\nuserAccountDAO.delete = (id: number) => {\n\treturn new Promise((resolve, reject) => {\n\t\tmodels.userAccount.destroy({ where: { id } })\n\t\t\t.then(result => resolve(result))\n\t\t\t.catch(error => reject(error));\n\t});\n};\n\nuserAccountDAO.update = (value: Object, where: Object) => {\n\treturn new Promise((resolve, reject) => {\n\t\tmodels.userAccount.update(value, {\n\t\t\twhere,\n\t\t\treturning: true\n\t\t})\n\t\t\t.then(result => resolve(result))\n\t\t\t.catch(error => reject(error));\n\t});\n};\n\nuserAccountDAO.findOrCreate = (userAccount: UserAccount) => {\n\treturn sequelize.transaction((trans) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tmodels.userAccount.findOrCreate({\n\t\t\t\twhere: {\n\t\t\t\t\temail: userAccount.email\n\t\t\t\t},\n\t\t\t\tdefaults: userAccount,\n\t\t\t\tinclude: [{\n\t\t\t\t\tmodel: models.userProfile,\n\t\t\t\t\tas: 'UserProfile'\n\t\t\t\t}]\n\t\t\t})\n\t\t\t\t.then(result => resolve(result))\n\t\t\t\t.catch(error => reject(error));\n\t\t});\n\t});\n};\n\nuserAccountDAO.findOrCreateSocial = (userAccount: UserAccount, provider: ProviderType) => {\n\treturn sequelize.transaction((trans) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tmodels.userAccount.findOrCreate({\n\t\t\t\twhere: {\n\t\t\t\t\temail: userAccount.email\n\t\t\t\t},\n\t\t\t\tdefaults: userAccount,\n\t\t\t\tinclude: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel: models.userProfile,\n\t\t\t\t\t\tas: 'UserProfile'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel: models.loginProvider,\n\t\t\t\t\t\tas: 'LoginProvider',\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t})\n\t\t\t\t.then(result => resolve(result))\n\t\t\t\t.catch(error => reject(error));\n\t\t});\n\t});\n};\n\nexport default userAccountDAO;"]}