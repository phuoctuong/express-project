Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (8680bb5d-ed89-4d36-a9e3-d6c5ae1c3e52): START TRANSACTION;
Executing (8680bb5d-ed89-4d36-a9e3-d6c5ae1c3e52): SELECT "id", "token", "email", "password_hash" AS "password", "salt_hash" AS "saltHash", "activated", "status", "email_confirmation_token" AS "emailConfirmationToken", "password_reminder_token" AS "passwordReminderToken", "created_at", "updated_at", "deleted_at", "user_profile_id", "login_provider_id" FROM "user_account" AS "userAccount" WHERE (("userAccount"."deleted_at" > '2017-11-12 05:09:18.639 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (8680bb5d-ed89-4d36-a9e3-d6c5ae1c3e52): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "user_account", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_cdf5a90d9ccc4f31995dbb72ee19344b$ BEGIN INSERT INTO "user_account" ("id","email","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at") VALUES (DEFAULT,'phuoctuong1806@yahoo.com.vn',false,false,NULL,NULL,'2017-11-12 05:09:18.661 +00:00','2017-11-12 05:09:18.661 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_cdf5a90d9ccc4f31995dbb72ee19344b$ LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (8680bb5d-ed89-4d36-a9e3-d6c5ae1c3e52): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

Executing (9468f53f-3826-4a0b-862e-9e3612a67db0): START TRANSACTION;
Executing (9468f53f-3826-4a0b-862e-9e3612a67db0): SELECT "id", "token", "email", "password_hash" AS "password", "salt_hash" AS "saltHash", "activated", "status", "email_confirmation_token" AS "emailConfirmationToken", "password_reminder_token" AS "passwordReminderToken", "created_at", "updated_at", "deleted_at", "user_profile_id", "login_provider_id" FROM "user_account" AS "userAccount" WHERE (("userAccount"."deleted_at" > '2017-11-12 05:20:29.426 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (9468f53f-3826-4a0b-862e-9e3612a67db0): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "user_account", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_7208eb898b814bc3831609ccbdbf7ec8$ BEGIN INSERT INTO "user_account" ("id","email","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at") VALUES (DEFAULT,'phuoctuong1806@yahoo.com.vn',false,false,NULL,NULL,'2017-11-12 05:20:29.448 +00:00','2017-11-12 05:20:29.448 +00:00') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_7208eb898b814bc3831609ccbdbf7ec8$ LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (9468f53f-3826-4a0b-862e-9e3612a67db0): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (ae7ea0b0-9a60-4253-a303-03121a71d17c): START TRANSACTION;
Executing (ae7ea0b0-9a60-4253-a303-03121a71d17c): SAVEPOINT "ae7ea0b0-9a60-4253-a303-03121a71d17c-savepoint-1";
Executing (ae7ea0b0-9a60-4253-a303-03121a71d17c): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 05:31:11.784 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 05:31:11.784 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 05:31:11.784 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (ae7ea0b0-9a60-4253-a303-03121a71d17c): INSERT INTO "user_profile" ("id","first_name","last_name","profile_img","gender","created_at","updated_at") VALUES (DEFAULT,'Phước','Tường','https://scontent.xx.fbcdn.net/v/t1.0-1/c3.0.50.50/p50x50/23130928_1242250402545155_4137995232100395158_n.jpg?oh=5b909b48a216ab3f5d88f5c576e9c6eb&oe=5A9C9F10','male','2017-11-12 05:31:11.824 +00:00','2017-11-12 05:31:11.824 +00:00') RETURNING *;Executing (ae7ea0b0-9a60-4253-a303-03121a71d17c): INSERT INTO "login_provider" ("id","social_id","access_token","refresh_token","provider","created_at","updated_at") VALUES (DEFAULT,'1249256761844519','EAAKJrqX7GJEBANfAigiyVa6hqMZBgdwravDguAhvEYgteX9XEsOOBKZBL1Uqc0hQwOjlr7kyVvYgvTJUggXrTURZAXZBi9CijUcSZAlQl9BFVqQEqRAkfQfwT3dGqZAcB5SK4BCXYSHV3MDAbzecIiYtX2jYdcqwmPq8GhAskCGRKlWWZCFOZCOG',NULL,'facebook','2017-11-12 05:31:11.825 +00:00','2017-11-12 05:31:11.825 +00:00') RETURNING *;

Executing (ae7ea0b0-9a60-4253-a303-03121a71d17c): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "user_account", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_dae397b911ff4d46a3884b010ec96933$ BEGIN INSERT INTO "user_account" ("id","email","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at","user_profile_id","login_provider_id") VALUES (DEFAULT,'phuoctuong1806@yahoo.com.vn',false,false,NULL,NULL,'2017-11-12 05:31:11.816 +00:00','2017-11-12 05:31:11.816 +00:00','1','1') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_dae397b911ff4d46a3884b010ec96933$ LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (ae7ea0b0-9a60-4253-a303-03121a71d17c): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (8272601b-e273-476c-a864-3c8d048ffe95): START TRANSACTION;
Executing (8272601b-e273-476c-a864-3c8d048ffe95): SAVEPOINT "8272601b-e273-476c-a864-3c8d048ffe95-savepoint-1";
Executing (8272601b-e273-476c-a864-3c8d048ffe95): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 05:49:15.915 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 05:49:15.915 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 05:49:15.915 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (8272601b-e273-476c-a864-3c8d048ffe95): COMMIT;
Executing (1d9c74f7-278b-4b26-9047-d5f22542eb15): START TRANSACTION;
Executing (1d9c74f7-278b-4b26-9047-d5f22542eb15): SAVEPOINT "1d9c74f7-278b-4b26-9047-d5f22542eb15-savepoint-1";
Executing (1d9c74f7-278b-4b26-9047-d5f22542eb15): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 05:49:32.654 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 05:49:32.654 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 05:49:32.654 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (1d9c74f7-278b-4b26-9047-d5f22542eb15): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (39723232-af4c-417e-b116-2bf5f9bca14f): START TRANSACTION;
Executing (39723232-af4c-417e-b116-2bf5f9bca14f): SAVEPOINT "39723232-af4c-417e-b116-2bf5f9bca14f-savepoint-1";
Executing (39723232-af4c-417e-b116-2bf5f9bca14f): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 06:25:17.110 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 06:25:17.110 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 06:25:17.110 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (39723232-af4c-417e-b116-2bf5f9bca14f): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (7e19f325-510c-4ff5-9952-c19219f16c02): START TRANSACTION;
Executing (7e19f325-510c-4ff5-9952-c19219f16c02): SAVEPOINT "7e19f325-510c-4ff5-9952-c19219f16c02-savepoint-1";
Executing (7e19f325-510c-4ff5-9952-c19219f16c02): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 06:26:22.875 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 06:26:22.875 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 06:26:22.875 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (7e19f325-510c-4ff5-9952-c19219f16c02): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (1d2eac8e-7108-4710-af18-9a752c74ba62): START TRANSACTION;
Executing (1d2eac8e-7108-4710-af18-9a752c74ba62): SAVEPOINT "1d2eac8e-7108-4710-af18-9a752c74ba62-savepoint-1";
Executing (1d2eac8e-7108-4710-af18-9a752c74ba62): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 06:32:25.368 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 06:32:25.368 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 06:32:25.368 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (1d2eac8e-7108-4710-af18-9a752c74ba62): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (4bb32487-7b6e-4c79-a533-4e8b952d4708): START TRANSACTION;
Executing (4bb32487-7b6e-4c79-a533-4e8b952d4708): SAVEPOINT "4bb32487-7b6e-4c79-a533-4e8b952d4708-savepoint-1";
Executing (4bb32487-7b6e-4c79-a533-4e8b952d4708): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 06:35:52.949 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 06:35:52.949 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 06:35:52.949 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (4bb32487-7b6e-4c79-a533-4e8b952d4708): INSERT INTO "user_profile" ("id","first_name","last_name","profile_img","gender","created_at","updated_at") VALUES (DEFAULT,'Phước','Tường','https://scontent.xx.fbcdn.net/v/t1.0-1/c3.0.50.50/p50x50/23130928_1242250402545155_4137995232100395158_n.jpg?oh=5b909b48a216ab3f5d88f5c576e9c6eb&oe=5A9C9F10','male','2017-11-12 06:35:52.996 +00:00','2017-11-12 06:35:52.996 +00:00') RETURNING *;Executing (4bb32487-7b6e-4c79-a533-4e8b952d4708): INSERT INTO "login_provider" ("id","social_id","access_token","refresh_token","provider","created_at","updated_at") VALUES (DEFAULT,'1249256761844519','EAAKJrqX7GJEBAMD6XAOn2Wq7qhSGvtFrFIHVHhqLUYuSLTuWesyg53pIhymT6HAAyCtRrqHHEzgZA8ZATaSYdua15RX65UHp3IHGVf1SWAWR6ZB6JjG1NmPrEcGZBB5iBu31asP88zkt8ptHgM6IdXjDO2K5FuBHJp1TBJSHz8tgpK6kI3nh',NULL,'facebook','2017-11-12 06:35:52.997 +00:00','2017-11-12 06:35:52.997 +00:00') RETURNING *;

Executing (4bb32487-7b6e-4c79-a533-4e8b952d4708): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "user_account", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_bdedf9bda0cb4b9199ff89bfe5f4aa1e$ BEGIN INSERT INTO "user_account" ("id","email","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at","user_profile_id","login_provider_id") VALUES (DEFAULT,'phuoctuong1806@yahoo.com.vn',false,false,NULL,NULL,'2017-11-12 06:35:52.990 +00:00','2017-11-12 06:35:52.990 +00:00','2','2') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_bdedf9bda0cb4b9199ff89bfe5f4aa1e$ LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (4bb32487-7b6e-4c79-a533-4e8b952d4708): COMMIT;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (5253b9cd-fd0c-4b13-8013-c083907aa46c): START TRANSACTION;
Executing (5253b9cd-fd0c-4b13-8013-c083907aa46c): SAVEPOINT "5253b9cd-fd0c-4b13-8013-c083907aa46c-savepoint-1";
Executing (5253b9cd-fd0c-4b13-8013-c083907aa46c): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 06:38:10.636 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 06:38:10.636 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 06:38:10.637 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (5253b9cd-fd0c-4b13-8013-c083907aa46c): INSERT INTO "user_profile" ("id","first_name","last_name","profile_img","gender","created_at","updated_at") VALUES (DEFAULT,'Phước','Tường','https://scontent.xx.fbcdn.net/v/t1.0-1/c3.0.50.50/p50x50/23130928_1242250402545155_4137995232100395158_n.jpg?oh=5b909b48a216ab3f5d88f5c576e9c6eb&oe=5A9C9F10','male','2017-11-12 06:38:10.684 +00:00','2017-11-12 06:38:10.684 +00:00') RETURNING *;Executing (5253b9cd-fd0c-4b13-8013-c083907aa46c): INSERT INTO "login_provider" ("id","social_id","access_token","refresh_token","provider","created_at","updated_at") VALUES (DEFAULT,'1249256761844519','EAAKJrqX7GJEBAC8mWKNwzDPzTZCqDTcu7wrM1QtkcZADzDaXgY2KnudqXgLp5YwTMBROQeh8HyqtaP37ZAzSxFQ9NcKqvns35ZAHh7MOwGPQkf4XEWQpBwZBp5VapScNLulPqy0T6A5U0tZB5RUdP1ZBm9g4wWz8ZBjfPd0UjCn7xkf8iZC83QORV',NULL,'facebook','2017-11-12 06:38:10.686 +00:00','2017-11-12 06:38:10.686 +00:00') RETURNING *;

Executing (5253b9cd-fd0c-4b13-8013-c083907aa46c): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "user_account", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_ef6ee9eff86f4b349f3f0ffd9fa29933$ BEGIN INSERT INTO "user_account" ("id","email","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at","user_profile_id","login_provider_id") VALUES (DEFAULT,'phuoctuong1806@yahoo.com.vn',false,false,NULL,NULL,'2017-11-12 06:38:10.675 +00:00','2017-11-12 06:38:10.675 +00:00','3','3') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_ef6ee9eff86f4b349f3f0ffd9fa29933$ LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (5253b9cd-fd0c-4b13-8013-c083907aa46c): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InByb3ZpZGVyIjoiZmFjZWJvb2sifSwiaWF0IjoxNTEwNDY4NjkwLCJleHAiOjE1MTA0NzIyOTB9.U12S3EKN-bPe7Adz4cpn2KTr5WKZ0NwsAaQdaUFEE4k',"status"=true,"updated_at"='2017-11-12 06:38:10.740 +00:00' WHERE "id" = '3'
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (b970cc42-e966-44f9-a88d-4a60555824ab): START TRANSACTION;
Executing (b970cc42-e966-44f9-a88d-4a60555824ab): INSERT INTO "user_profile" ("id","first_name","last_name","created_at","updated_at") VALUES (DEFAULT,'Tuong','Phuoc','2017-11-12 06:40:22.830 +00:00','2017-11-12 06:40:22.830 +00:00') RETURNING *;
Executing (b970cc42-e966-44f9-a88d-4a60555824ab): INSERT INTO "user_account" ("id","email","password_hash","salt_hash","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at","user_profile_id") VALUES (DEFAULT,'phuoctuong285@gmail.com','4ebf996010684a447a1d252d8dd9dd7d','c63e802d8f59d7d',false,false,NULL,NULL,'2017-11-12 06:40:22.823 +00:00','2017-11-12 06:40:22.823 +00:00','4') RETURNING *;
Executing (b970cc42-e966-44f9-a88d-4a60555824ab): COMMIT;
Executing (default): SELECT "id", "token", "email", "password_hash" AS "password", "salt_hash" AS "saltHash", "activated", "status", "email_confirmation_token" AS "emailConfirmationToken", "password_reminder_token" AS "passwordReminderToken", "created_at", "updated_at", "deleted_at", "user_profile_id", "login_provider_id" FROM "user_account" AS "userAccount" WHERE (("userAccount"."deleted_at" > '2017-11-12 06:40:25.506 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong285@gmail.com') LIMIT 1;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiNCJ9LCJpYXQiOjE1MTA0Njg4MjUsImV4cCI6MTUxMDQ3MjQyNX0.QHT7kNPHs_1ILEmE2Ua-1DJRpnZTxbmspSLWo6g9zng',"status"=true,"updated_at"='2017-11-12 06:40:25.530 +00:00' WHERE "id" = '4'
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): UPDATE "user_account" SET "status"=false,"updated_at"='2017-11-12 06:42:15.498 +00:00' WHERE "id" = '4' AND "status" = true RETURNING *
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));

Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (3f5c2686-eca7-42e5-a4f1-e5904122e06a): START TRANSACTION;
Executing (3f5c2686-eca7-42e5-a4f1-e5904122e06a): SAVEPOINT "3f5c2686-eca7-42e5-a4f1-e5904122e06a-savepoint-1";
Executing (3f5c2686-eca7-42e5-a4f1-e5904122e06a): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 06:51:25.297 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 06:51:25.297 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 06:51:25.297 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (3f5c2686-eca7-42e5-a4f1-e5904122e06a): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InByb3ZpZGVyIjoiZmFjZWJvb2sifSwiaWF0IjoxNTEwNDY5NDg1LCJleHAiOjE1MTA0NzMwODV9.xEmrBr7FXeveKqoN7DDLrhz291C6n2lm0ybF_XJA008',"updated_at"='2017-11-12 06:51:25.344 +00:00' WHERE "id" = '3'
Executing (default): UPDATE "user_account" SET "status"=false,"updated_at"='2017-11-12 06:51:46.963 +00:00' WHERE "id" = NULL AND "status" = true RETURNING *
Executing (default): UPDATE "user_account" SET "status"=false,"updated_at"='2017-11-12 06:52:42.040 +00:00' WHERE "id" = NULL AND "status" = true RETURNING *
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (7ec68cdb-a132-4a26-9efc-a4da14b92cd6): START TRANSACTION;
Executing (7ec68cdb-a132-4a26-9efc-a4da14b92cd6): SAVEPOINT "7ec68cdb-a132-4a26-9efc-a4da14b92cd6-savepoint-1";
Executing (7ec68cdb-a132-4a26-9efc-a4da14b92cd6): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 06:54:08.963 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 06:54:08.964 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 06:54:08.964 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (7ec68cdb-a132-4a26-9efc-a4da14b92cd6): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InByb3ZpZGVyIjoiZmFjZWJvb2sifSwiaWF0IjoxNTEwNDY5NjQ5LCJleHAiOjE1MTA0NzMyNDl9.YJTgG0ECbBb8fwR4L5iomuIAL6dkCMOjTzM-IUiCMmY',"updated_at"='2017-11-12 06:54:09.005 +00:00' WHERE "id" = '3'
Executing (default): UPDATE "user_account" SET "status"=false,"updated_at"='2017-11-12 06:54:25.954 +00:00' WHERE "id" = NULL AND "status" = true RETURNING *
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (ca0de93d-4e57-40b4-b9c2-4621aeaec3bb): START TRANSACTION;
Executing (ca0de93d-4e57-40b4-b9c2-4621aeaec3bb): SAVEPOINT "ca0de93d-4e57-40b4-b9c2-4621aeaec3bb-savepoint-1";
Executing (ca0de93d-4e57-40b4-b9c2-4621aeaec3bb): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 06:57:32.937 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 06:57:32.937 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 06:57:32.937 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (ca0de93d-4e57-40b4-b9c2-4621aeaec3bb): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiMyIsInByb3ZpZGVyIjoiZmFjZWJvb2sifSwiaWF0IjoxNTEwNDY5ODUyLCJleHAiOjE1MTA0NzM0NTJ9.pRC45t0Y3DUyut3zxi2OSt4kPcUiHZjOpbUV7PzhzdI',"updated_at"='2017-11-12 06:57:32.984 +00:00' WHERE "id" = '3'
Executing (default): UPDATE "user_account" SET "status"=false,"updated_at"='2017-11-12 06:57:45.508 +00:00' WHERE "id" = '3' AND "status" = true RETURNING *
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (ed040023-1f8c-431c-8b50-d294e0f64a36): START TRANSACTION;
Executing (ed040023-1f8c-431c-8b50-d294e0f64a36): SAVEPOINT "ed040023-1f8c-431c-8b50-d294e0f64a36-savepoint-1";
Executing (ed040023-1f8c-431c-8b50-d294e0f64a36): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 07:22:00.164 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 07:22:00.164 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 07:22:00.164 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (ed040023-1f8c-431c-8b50-d294e0f64a36): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiMyIsInByb3ZpZGVyIjoiZmFjZWJvb2sifSwiaWF0IjoxNTEwNDcxMzIwLCJleHAiOjE1MTA0NzQ5MjB9.bMzMFCcAECYSWicTuQUAnI7-1wfSj8h4G2amMvVeyCc',"status"=true,"updated_at"='2017-11-12 07:22:00.215 +00:00' WHERE "id" = '3'
Executing (default): UPDATE "user_account" SET "status"=false,"updated_at"='2017-11-12 07:22:50.293 +00:00' WHERE "id" = '3' AND "status" = true RETURNING *
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (cb87960c-c424-402b-9ba7-da87b9615df1): START TRANSACTION;
Executing (cb87960c-c424-402b-9ba7-da87b9615df1): SAVEPOINT "cb87960c-c424-402b-9ba7-da87b9615df1-savepoint-1";
Executing (cb87960c-c424-402b-9ba7-da87b9615df1): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 15:41:17.396 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 15:41:17.396 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 15:41:17.396 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (cb87960c-c424-402b-9ba7-da87b9615df1): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiMyIsInByb3ZpZGVyIjoiZmFjZWJvb2sifSwiaWF0IjoxNTEwNTAxMjc3LCJleHAiOjE1MTA1MDQ4Nzd9.Vwf_g8Lx5-Ct8yCbws1ynd5KThjr10AQe-zMlqROJew',"status"=true,"updated_at"='2017-11-12 15:41:17.521 +00:00' WHERE "id" = '3'
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (b0c087d9-aab0-4a0b-a194-a472ad690e81): START TRANSACTION;
Executing (b0c087d9-aab0-4a0b-a194-a472ad690e81): SAVEPOINT "b0c087d9-aab0-4a0b-a194-a472ad690e81-savepoint-1";
Executing (b0c087d9-aab0-4a0b-a194-a472ad690e81): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 15:58:50.924 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 15:58:50.924 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'google') WHERE (("userAccount"."deleted_at" > '2017-11-12 15:58:50.924 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong285@gmail.com') LIMIT 1;
Executing (b0c087d9-aab0-4a0b-a194-a472ad690e81): INSERT INTO "user_profile" ("id","first_name","last_name","profile_img","gender","created_at","updated_at") VALUES (DEFAULT,'tuong','phuoc','https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50','male','2017-11-12 15:58:50.973 +00:00','2017-11-12 15:58:50.973 +00:00') RETURNING *;Executing (b0c087d9-aab0-4a0b-a194-a472ad690e81): INSERT INTO "login_provider" ("id","access_token","refresh_token","provider","created_at","updated_at") VALUES (DEFAULT,'ya29.GlsCBf8ZDYmwpltaMtrR6Msd9-KQiaAmPhiepTMFpcZKOFFoslhYDPmJhHafREAp6nZHXMzD8dAT-WtIMTBJQd8C_kleDIPdNgdbFt1z4nHYXWgWbYOZfX-jKaZW',NULL,'google','2017-11-12 15:58:50.974 +00:00','2017-11-12 15:58:50.974 +00:00') RETURNING *;

Executing (b0c087d9-aab0-4a0b-a194-a472ad690e81): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "user_account", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_529366157b6945bf8350d95bafa3013f$ BEGIN INSERT INTO "user_account" ("id","email","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at","user_profile_id","login_provider_id") VALUES (DEFAULT,'phuoctuong285@gmail.com',false,false,NULL,NULL,'2017-11-12 15:58:50.957 +00:00','2017-11-12 15:58:50.957 +00:00','5','4') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_529366157b6945bf8350d95bafa3013f$ LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (b0c087d9-aab0-4a0b-a194-a472ad690e81): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiNSIsInByb3ZpZGVyIjoiZ29vZ2xlIn0sImlhdCI6MTUxMDUwMjMzMSwiZXhwIjoxNTEwNTA1OTMxfQ.RzupUcUN849LnBA89pfAqmU0SJgHAO_NWaU5WyE6AiA',"status"=true,"updated_at"='2017-11-12 15:58:51.307 +00:00' WHERE "id" = '5'
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (78d72c16-b0d0-438d-95fd-e880d91562ae): START TRANSACTION;
Executing (78d72c16-b0d0-438d-95fd-e880d91562ae): SAVEPOINT "78d72c16-b0d0-438d-95fd-e880d91562ae-savepoint-1";
Executing (78d72c16-b0d0-438d-95fd-e880d91562ae): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 16:00:29.314 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 16:00:29.314 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'google') WHERE (("userAccount"."deleted_at" > '2017-11-12 16:00:29.314 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong285@gmail.com') LIMIT 1;
Executing (78d72c16-b0d0-438d-95fd-e880d91562ae): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiNSIsInByb3ZpZGVyIjoiZ29vZ2xlIn0sImlhdCI6MTUxMDUwMjQyOSwiZXhwIjoxNTEwNTA2MDI5fQ.3aKthy7qEker6sEC-joHkE5HavdO4t-3LC__TdbpU90',"updated_at"='2017-11-12 16:00:29.355 +00:00' WHERE "id" = '5'
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (0c137a34-19f3-47b5-ae96-1e2e093307bb): START TRANSACTION;
Executing (0c137a34-19f3-47b5-ae96-1e2e093307bb): SAVEPOINT "0c137a34-19f3-47b5-ae96-1e2e093307bb-savepoint-1";
Executing (0c137a34-19f3-47b5-ae96-1e2e093307bb): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 16:01:34.388 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 16:01:34.388 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-12 16:01:34.388 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (0c137a34-19f3-47b5-ae96-1e2e093307bb): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiMyIsInByb3ZpZGVyIjoiZmFjZWJvb2sifSwiaWF0IjoxNTEwNTAyNDk0LCJleHAiOjE1MTA1MDYwOTR9.DlLNO-A-KdqDPwKvc2p-tV5GOPBx0uDqPtMtYgvYspg',"updated_at"='2017-11-12 16:01:34.428 +00:00' WHERE "id" = '3'
Executing (60c6f243-e31d-45a7-9768-b70b82704b80): START TRANSACTION;
Executing (60c6f243-e31d-45a7-9768-b70b82704b80): SAVEPOINT "60c6f243-e31d-45a7-9768-b70b82704b80-savepoint-1";
Executing (60c6f243-e31d-45a7-9768-b70b82704b80): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-12 16:01:43.797 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-12 16:01:43.798 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'google') WHERE (("userAccount"."deleted_at" > '2017-11-12 16:01:43.798 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong285@gmail.com') LIMIT 1;
Executing (60c6f243-e31d-45a7-9768-b70b82704b80): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiNSIsInByb3ZpZGVyIjoiZ29vZ2xlIn0sImlhdCI6MTUxMDUwMjUwMywiZXhwIjoxNTEwNTA2MTAzfQ.Z-w_HJ0iFCgadRtm4adfiuiInoKnVlkliwzoZAcyZ7A',"updated_at"='2017-11-12 16:01:43.814 +00:00' WHERE "id" = '5'
Executing (default): UPDATE "user_account" SET "status"=false,"updated_at"='2017-11-12 16:02:23.056 +00:00' WHERE "id" = '5' AND "status" = true RETURNING *
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT 1+1 AS result
Executing (default): CREATE TABLE IF NOT EXISTS "login_provider" ("id"  BIGSERIAL UNIQUE , "social_id" VARCHAR(255) UNIQUE, "access_token" VARCHAR(255), "refresh_token" VARCHAR(255), "provider" VARCHAR(255), "expires_in_access" TIMESTAMP WITH TIME ZONE, "expires_in_refresh" TIMESTAMP WITH TIME ZONE, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), UNIQUE ("social_id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'login_provider' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_profile" ("id"  BIGSERIAL UNIQUE , "first_name" VARCHAR(255), "last_name" VARCHAR(255), "profile_img" VARCHAR(255), "gender" VARCHAR(255), "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, UNIQUE ("id"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_profile' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "user_account" ("id"  BIGSERIAL UNIQUE , "token" VARCHAR(255) UNIQUE, "email" VARCHAR(255), "password_hash" VARCHAR(255), "salt_hash" VARCHAR(255), "activated" BOOLEAN DEFAULT false, "status" BOOLEAN DEFAULT false, "email_confirmation_token" VARCHAR(255) DEFAULT NULL, "password_reminder_token" VARCHAR(255) DEFAULT NULL, "created_at" TIMESTAMP WITH TIME ZONE NOT NULL, "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL, "deleted_at" TIMESTAMP WITH TIME ZONE, "user_profile_id" BIGINT REFERENCES "user_profile" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "login_provider_id" BIGINT REFERENCES "login_provider" ("id") ON DELETE SET NULL ON UPDATE CASCADE, UNIQUE ("id"), UNIQUE ("token"), PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_account' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (d218edd1-1cd6-4d2d-8be7-359e90a2675c): START TRANSACTION;
Executing (d218edd1-1cd6-4d2d-8be7-359e90a2675c): SAVEPOINT "d218edd1-1cd6-4d2d-8be7-359e90a2675c-savepoint-1";
Executing (d218edd1-1cd6-4d2d-8be7-359e90a2675c): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-29 15:14:01.678 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-29 15:14:01.678 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'facebook') WHERE (("userAccount"."deleted_at" > '2017-11-29 15:14:01.678 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong1806@yahoo.com.vn') LIMIT 1;
Executing (d218edd1-1cd6-4d2d-8be7-359e90a2675c): INSERT INTO "user_profile" ("id","first_name","last_name","profile_img","gender","created_at","updated_at") VALUES (DEFAULT,'Phước','Tường','https://scontent.xx.fbcdn.net/v/t1.0-1/c3.0.50.50/p50x50/23130928_1242250402545155_4137995232100395158_n.jpg?oh=5b909b48a216ab3f5d88f5c576e9c6eb&oe=5A9C9F10','male','2017-11-29 15:14:01.722 +00:00','2017-11-29 15:14:01.722 +00:00') RETURNING *;Executing (d218edd1-1cd6-4d2d-8be7-359e90a2675c): INSERT INTO "login_provider" ("id","social_id","access_token","refresh_token","provider","created_at","updated_at") VALUES (DEFAULT,'1249256761844519','EAAKJrqX7GJEBAJDgLob7iYHQI1u8jxXw7pBBh7lsK4LxcqeGNnkyuZA0RanyJVutnRkhXJ7BzESQ0PUzgLcRi25138H1z3Q35r63hO9XiVvYQgm4eZAqGZCZB2h5MoT3JRSCQtZBCOZCfid2t1ashZARI0QJLDylJrwHljuMhY8oVoAISfT3A8T',NULL,'facebook','2017-11-29 15:14:01.723 +00:00','2017-11-29 15:14:01.723 +00:00') RETURNING *;

Executing (d218edd1-1cd6-4d2d-8be7-359e90a2675c): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "user_account", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_c136c7f27a564f9c82eedf4100473270$ BEGIN INSERT INTO "user_account" ("id","email","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at","user_profile_id","login_provider_id") VALUES (DEFAULT,'phuoctuong1806@yahoo.com.vn',false,false,NULL,NULL,'2017-11-29 15:14:01.715 +00:00','2017-11-29 15:14:01.715 +00:00','1','1') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_c136c7f27a564f9c82eedf4100473270$ LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (d218edd1-1cd6-4d2d-8be7-359e90a2675c): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiMSIsInByb3ZpZGVyIjoiZmFjZWJvb2sifSwiaWF0IjoxNTExOTY4NDQxLCJleHAiOjE1MTE5NzIwNDF9.OqX2kLiz9huCjzewEX2CxNXlb762u9PW1GQ3xAhz7pY',"status"=true,"updated_at"='2017-11-29 15:14:01.808 +00:00' WHERE "id" = '1'
Executing (default): UPDATE "user_account" SET "status"=false,"updated_at"='2017-11-29 15:21:30.673 +00:00' WHERE "id" = '1' AND "status" = true RETURNING *
Executing (271e8832-4910-494d-b0b6-ba5065deac02): START TRANSACTION;
Executing (271e8832-4910-494d-b0b6-ba5065deac02): INSERT INTO "user_profile" ("id","first_name","last_name","created_at","updated_at") VALUES (DEFAULT,'Tuong','Phuoc','2017-11-29 15:23:44.972 +00:00','2017-11-29 15:23:44.972 +00:00') RETURNING *;
Executing (271e8832-4910-494d-b0b6-ba5065deac02): INSERT INTO "user_account" ("id","email","password_hash","salt_hash","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at","user_profile_id") VALUES (DEFAULT,'phuoctuong285@gmail.com','7f91d127e2d7703865ae66677572ea37','320e2c0eaaa967d',false,false,NULL,NULL,'2017-11-29 15:23:44.966 +00:00','2017-11-29 15:23:44.966 +00:00','2') RETURNING *;
Executing (271e8832-4910-494d-b0b6-ba5065deac02): COMMIT;
Executing (default): SELECT "id", "token", "email", "password_hash" AS "password", "salt_hash" AS "saltHash", "activated", "status", "email_confirmation_token" AS "emailConfirmationToken", "password_reminder_token" AS "passwordReminderToken", "created_at", "updated_at", "deleted_at", "user_profile_id", "login_provider_id" FROM "user_account" AS "userAccount" WHERE (("userAccount"."deleted_at" > '2017-11-29 15:27:26.794 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong285@gmail.com') LIMIT 1;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiMiJ9LCJpYXQiOjE1MTE5NjkyNDYsImV4cCI6MTUxMTk3Mjg0Nn0.N9PVV8LV5xJ-JO3jbfoEGq9ErTAMcsifEuGfQvRIeWw',"status"=true,"updated_at"='2017-11-29 15:27:26.812 +00:00' WHERE "id" = '2'
Executing (e0e0a263-4883-4dca-8d7b-cda42416e325): START TRANSACTION;
Executing (e0e0a263-4883-4dca-8d7b-cda42416e325): SAVEPOINT "e0e0a263-4883-4dca-8d7b-cda42416e325-savepoint-1";
Executing (e0e0a263-4883-4dca-8d7b-cda42416e325): SELECT "userAccount"."id", "userAccount"."token", "userAccount"."email", "userAccount"."password_hash" AS "password", "userAccount"."salt_hash" AS "saltHash", "userAccount"."activated", "userAccount"."status", "userAccount"."email_confirmation_token" AS "emailConfirmationToken", "userAccount"."password_reminder_token" AS "passwordReminderToken", "userAccount"."created_at", "userAccount"."updated_at", "userAccount"."deleted_at", "userAccount"."user_profile_id", "userAccount"."login_provider_id", "UserProfile"."id" AS "UserProfile.id", "UserProfile"."first_name" AS "UserProfile.firstName", "UserProfile"."last_name" AS "UserProfile.lastName", "UserProfile"."profile_img" AS "UserProfile.profileImg", "UserProfile"."gender" AS "UserProfile.gender", "UserProfile"."created_at" AS "UserProfile.created_at", "UserProfile"."updated_at" AS "UserProfile.updated_at", "UserProfile"."deleted_at" AS "UserProfile.deleted_at", "LoginProvider"."id" AS "LoginProvider.id", "LoginProvider"."social_id" AS "LoginProvider.socialId", "LoginProvider"."access_token" AS "LoginProvider.accessToken", "LoginProvider"."refresh_token" AS "LoginProvider.refreshToken", "LoginProvider"."provider" AS "LoginProvider.provider", "LoginProvider"."expires_in_access" AS "LoginProvider.expiresInAccess", "LoginProvider"."expires_in_refresh" AS "LoginProvider.expiresInRefresh", "LoginProvider"."created_at" AS "LoginProvider.created_at", "LoginProvider"."updated_at" AS "LoginProvider.updated_at", "LoginProvider"."deleted_at" AS "LoginProvider.deleted_at" FROM "user_account" AS "userAccount" LEFT OUTER JOIN "user_profile" AS "UserProfile" ON "userAccount"."user_profile_id" = "UserProfile"."id" AND ("UserProfile"."deleted_at" > '2017-11-29 15:29:01.443 +00:00' OR "UserProfile"."deleted_at" IS NULL) INNER JOIN "login_provider" AS "LoginProvider" ON "userAccount"."login_provider_id" = "LoginProvider"."id" AND (("LoginProvider"."deleted_at" > '2017-11-29 15:29:01.443 +00:00' OR "LoginProvider"."deleted_at" IS NULL) AND "LoginProvider"."provider" = 'google') WHERE (("userAccount"."deleted_at" > '2017-11-29 15:29:01.443 +00:00' OR "userAccount"."deleted_at" IS NULL) AND "userAccount"."email" = 'phuoctuong186@gmail.com') LIMIT 1;
Executing (e0e0a263-4883-4dca-8d7b-cda42416e325): INSERT INTO "user_profile" ("id","first_name","last_name","profile_img","gender","created_at","updated_at") VALUES (DEFAULT,'tuong','phuoc','https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50',NULL,'2017-11-29 15:29:01.465 +00:00','2017-11-29 15:29:01.465 +00:00') RETURNING *;Executing (e0e0a263-4883-4dca-8d7b-cda42416e325): INSERT INTO "login_provider" ("id","access_token","refresh_token","provider","created_at","updated_at") VALUES (DEFAULT,'ya29.GlsTBeXUIFWb970sSnm-Ep0NotcxafTojb4BuU0WgIae6KRaKuBT-g4RJrAwevPb83guQwhl7DmpB0kYu8tWRP0HoSCmAjYjv2sITzHi0QUbUi8kF3FHf_T6yVTR',NULL,'google','2017-11-29 15:29:01.466 +00:00','2017-11-29 15:29:01.466 +00:00') RETURNING *;

Executing (e0e0a263-4883-4dca-8d7b-cda42416e325): CREATE OR REPLACE FUNCTION pg_temp.testfunc(OUT response "user_account", OUT sequelize_caught_exception text) RETURNS RECORD AS $func_6339a8749da1472b97c6e9a229a1325a$ BEGIN INSERT INTO "user_account" ("id","email","activated","status","email_confirmation_token","password_reminder_token","created_at","updated_at","user_profile_id","login_provider_id") VALUES (DEFAULT,'phuoctuong186@gmail.com',false,false,NULL,NULL,'2017-11-29 15:29:01.463 +00:00','2017-11-29 15:29:01.463 +00:00','3','2') RETURNING * INTO response; EXCEPTION WHEN unique_violation THEN GET STACKED DIAGNOSTICS sequelize_caught_exception = PG_EXCEPTION_DETAIL; END $func_6339a8749da1472b97c6e9a229a1325a$ LANGUAGE plpgsql; SELECT (testfunc.response).*, testfunc.sequelize_caught_exception FROM pg_temp.testfunc(); DROP FUNCTION IF EXISTS pg_temp.testfunc();
Executing (e0e0a263-4883-4dca-8d7b-cda42416e325): COMMIT;
Executing (default): UPDATE "user_account" SET "token"='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoiMyIsInByb3ZpZGVyIjoiZ29vZ2xlIn0sImlhdCI6MTUxMTk2OTM0MSwiZXhwIjoxNTExOTcyOTQxfQ.u98B4iqScgM5cIaWv8mJcK-SE4FNVMmrHpCCuYh54Kc',"status"=true,"updated_at"='2017-11-29 15:29:01.549 +00:00' WHERE "id" = '3'
